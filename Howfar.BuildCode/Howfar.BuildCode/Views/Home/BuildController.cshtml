@model Howfar.BuildCode.Models.Table

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Editor</title>
    <style type="text/css" media="screen">
        body {
            overflow: hidden;
        }

        #editor {
            margin: 0;
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
        }
    </style>

</head>
<body>
    @*;*@
<pre id="editor"><textarea>
using PDRZ.Integration.BLL.School.@Model.ConfigInfo.ModelFolderName;
using PDRZ.Integration.Entity.TransferData.Base;
using PDRZ.Integration.Entity.School.@Model.ConfigInfo.ModelFolderName;
using PDRZ.IntegrationController.Attribute;
using System;
using System.Web.Mvc;
@(Model.ConfigInfo.IsViewData? "using PDRZ.Integration.Entity.TransferData.School."+ Model.ConfigInfo.ModelFolderName+";" : "")

namespace PDRZ.IntegrationController.School.@Model.ConfigInfo.ModelFolderName
{
    public class @Model.ConfigInfo.ControllerName@("Controller") : BaseController
    {
        private @Model.ConfigInfo.EntityName@("BLL") BLL = new  @Model.ConfigInfo.EntityName@("BLL")();
        @(Model.ConfigInfo.IsViewData? "private DataDictionaryBLL dyBLL = new DataDictionaryBLL();" : "")

        /// &ltsummary>
        /// 列表 页面
        /// &lt/summary>
        /// <returns></returns>
        [ActionPermission]
        public ActionResult Manage()
        {
            return View("~/@Model.ConfigInfo.FolderPath/@Model.ConfigInfo.PageName@("List.cshtml")");
        }

        /// &ltsummary>
        /// 获取列表信息
        /// &lt/summary>
        /// &ltparam name="combinSearchText">&lt/param>
        /// &ltparam name="pageNo">&lt/param>
        /// &ltparam name="pageSize">&lt/param>
        /// <returns></returns>
        public JsonResult GetPageList(string combinSearchText, int pageNo, int pageSize, string orderSeq)
        {
            SearchParam param = new SearchParam()
            {
                PageIndex = pageNo - 1,
                PageSize = pageSize,
                OrderSeq = orderSeq
            };
            var list = BLL.GetPageList(param, combinSearchText, this.SchoolID);
            return new JsonResult()
            {
                Data = new
                {
                    body = new
                    {
                        total = param.TotalRecords,
                        pageNum = param.PageIndex + 1,
                        pageSize = param.PageSize,
                        pages = param.CalcPageCount(),
                        list = list
                    }
                },
                JsonRequestBehavior = JsonRequestBehavior.AllowGet
            };
        }

        /// &ltsummary>
        /// 编辑 页面
        /// &lt/summary>
        /// <returns></returns>
        [ActionPermission]
        public ActionResult Edit(@Model.ConfigInfo.EntityName Entity)
        {
            @(Model.ConfigInfo.IsViewData ? Model.ConfigInfo.EntityName+ "ViewData  vd = new "+ @Model.ConfigInfo.EntityName+ "ViewData();" : "")
@ViewBag.strControllerCode
            @(Model.ConfigInfo.IsViewData? "vd.Entity" : "Entity") = Entity.@Model.ConfigInfo.PKName != Guid.Empty ? BLL.GetEntity(Entity.@Model.ConfigInfo.PKName) : Entity;
            return View("~/@Model.ConfigInfo.FolderPath/@Model.ConfigInfo.PageName@("Edit.cshtml")", @(Model.ConfigInfo.IsViewData? "vd" : "Entity"));
        }

        /// &ltsummary>
        /// 新增/更新  信息
        /// &lt/summary>
        /// <returns></returns>
        [ValidateAntiForgeryToken]
        public JsonResult EditInfo(@Model.ConfigInfo.EntityName Entity)
        {
            StringResult Result = new StringResult();
            string isInsert = Entity.@Model.ConfigInfo.PKName == Guid.Empty ? "新增" : "更新";
            Entity.SchoolID = SchoolID;

            //if (BLL.CheckRepeatName(Entity))
            //{
            //    Result.Message = "名称已存在！";
            //    return Json(Result);
            //}
            int iResult = 0;
            if (isInsert.Contains("新增"))
            {
                Entity.@Model.ConfigInfo.PKName = GuidHelper.GenerateComb();
                Entity.CreateUser = UserInfo.UserID.ToString();
                iResult = BLL.Insert(Entity);
            }
            else
            {
                //Entity.SetNullabledNeedUpdateField(null, false);
                Entity.UpdateUser = UserInfo.UserID.ToString();
                iResult = BLL.Update(Entity);
            }
            
            Result.Flag = iResult > 0 ? FlagStatus.OK : FlagStatus.NO;
            Result.Message = isInsert;
            Result.Message += iResult > 0 ? "成功！" : "失败！";
            
            return Json(Result);
        }

        /// &ltsummary>
        /// 批量删除
        /// &lt/summary>
        /// &ltparam name="Entity">&lt/param>
        /// <returns></returns>
        [ActionPermission]
        public JsonResult Delete(string Ids)
        {
            StringResult Result = new StringResult();
            Result.Flag = FlagStatus.NO;

            if (BLL.BatchDelete(Ids))
            {
                Result.Flag = FlagStatus.OK;
                Result.Message = "删除成功！";
            }
            else
            {
                Result.Message = "删除失败！";
            }
            return Json(Result);
        }

    }
}</textarea></pre>
<script src="~/Scripts/ace/ace.js"></script>
<script src="~/Scripts/ace/ext-language_tools.js"></script>

<script>
    var editor = ace.edit("editor");
    //设置风格和语言（更多风格和语言，请到github上相应目录查看）
    theme = "xcode"
    language = "csharp"//"csharp"
    editor.setTheme("ace/theme/" + theme);
    editor.session.setMode("ace/mode/" + language);
    ace.require("ace/ext/language_tools");
    //字体大小
    editor.setFontSize(13);

    //设置只读（true时只读，用于展示代码）
    editor.setReadOnly(false);

    //自动换行,设置为off关闭
    editor.setOption("wrap", "free")
    editor.setOptions({
        enableBasicAutocompletion: true,
        enableSnippets: true,
        enableLiveAutocompletion: true
    });
</script>
</body>
</html>