@model Howfar.BuildCode.Models.Table

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Editor</title>
    <style type="text/css" media="screen">
        body {
            overflow: hidden;
        }

        #editor {
            margin: 0;
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
        }
    </style>

</head>
<body>
    <pre id="editor"><textarea>
using Newtonsoft.Json.Linq;
using Panto.Framework;
using Panto.Map.Extensions.DAL;
using PDRZ.Integration.Entity.School.@Model.ConfigInfo.ModelFolderName;
using PDRZ.Integration.Entity.TransferData.Base;
using System;
using System.Collections.Generic;

namespace PDRZ.Integration.Dal.School.@Model.ConfigInfo.ModelFolderName
{
    public class @Model.ConfigInfo.EntityName@("Dal")
    {
        /// &ltsummary>
        /// 分页获取数据
        /// &lt/summary>
        /// &ltparam name="param">&lt/param>
        /// &ltparam name="json">&lt/param>
        /// &ltparam name="schoolID">&lt/param>
        /// <returns></returns>
        public List<@Model.ConfigInfo.EntityName> GetPageList(SearchParam param, string json, Guid schoolID)
        {
            JObject jo = JObject.Parse(json);
            string sql = @@" SELECT @(string.Join(",",Model.EntityList.Where(t=>t.IsShow).Select(t=>"a."+t.ColumnName))) FROM @Model.ConfigInfo.TableName a Where a.SchoolID=@@SchoolID ";
@ViewBag.sbCond
            return SortPageHelper.GetList<@Model.ConfigInfo.EntityName>(sql, new
            {
@ViewBag.sbParam
                SchoolID = schoolID
            }, param);
        }

        /// &ltsummary>
        /// 批量删除
        /// &lt/summary>
        /// &ltparam name="IDs">&lt/param>
        public bool BatchDelete(string IDs)
        {
            string sql = @@" DELETE @Model.ConfigInfo.TableName WHERE @Model.ConfigInfo.PKName IN ('" + IDs + "') ";
            return CPQuery.From(sql).ExecuteNonQuery() > 0;
        }

        /// &ltsummary>
        /// 获取 实体 详细信息
        /// &lt/summary>
        /// &ltparam name="@Model.ConfigInfo.PKName">&lt/param>
        public @Model.ConfigInfo.EntityName GetEntity(Guid @Model.ConfigInfo.PKName)
        {
            string sql = @@" SELECT a.*,b.Name EmployeeName,c.OrgName OrgName FROM @Model.ConfigInfo.TableName a
                            LEFT JOIN dbo.KH_Employee b ON a.EmployeeID=b.EmployeeID
                            LEFT JOIN dbo.KH_Organization c ON b.DefaultOrgID=c.OrgID
                            Where a.@Model.ConfigInfo.PKName=@("@")@Model.ConfigInfo.PKName
                          ";
            return CPQuery.From(sql, new { @Model.ConfigInfo.PKName = @Model.ConfigInfo.PKName }).ToSingle<@Model.ConfigInfo.EntityName>();
        }

    }
}</textarea></pre>
    <script src="~/Scripts/ace/ace.js"></script>
    <script src="~/Scripts/ace/ext-language_tools.js"></script>

    <script>
        var editor = ace.edit("editor");
        //设置风格和语言（更多风格和语言，请到github上相应目录查看）
        theme = "xcode"
        language = "csharp"//"csharp"
        editor.setTheme("ace/theme/" + theme);
        editor.session.setMode("ace/mode/" + language);
        ace.require("ace/ext/language_tools");
        //字体大小
        editor.setFontSize(13);

        //设置只读（true时只读，用于展示代码）
        editor.setReadOnly(false);

        //自动换行,设置为off关闭
        editor.setOption("wrap", "free")
        editor.setOptions({
            enableBasicAutocompletion: true,
            enableSnippets: true,
            enableLiveAutocompletion: true
        });
    </script>
</body>
</html>